__________FIRST LESSON__________

# #, """, ''' are used in comment lines.

### whitespaces ###
\t \n These are whitespaces characters. It will be used in string subject.
-\n- new line -\t- tab

1)What is a variable?
They are data storage areas. It is used to protect data by using various locations in memory. It is divided into different types.
ex. age=19

Variable Definition Rules
+helloWorld -camelCase 
+helloworld 
+hello_world-snake case
+HelloWorld -PascalCase
+HELLOWORLD
(Suitable for py.)

-Hello-World -kebab-case    
(Nor Suitable for py.)

CONSTANT =1 ex. DOGUMYILI = 1990

For naming, understandable names should be given.
ex. hava_durumu_tahmini = "Karlı"
    havadurumuTahmini = NOT WELL
    havadurumutahmini = NOT WELL
    hdtahmini = NOT WELL

***
age = 19 # definition
age # declaration

If there is a definition or assignment, it is called a definition.
If it is a matter of using, specifying or declaring the value, it is called declaration.

***
Strings
It is a data type for holding texts and characters. It is defined in four different ways.

1- " xxx "
2- ' xxx '
3- ''' xxx
xxxxxxxxxxx '''
4-? (""" """)

Mini Notes
ex. 
name = "John"
surname = "Doe"
print(isim, " ", surname) >>  John  Doe

ex.
Normally the addition sign is used in arithmetic types. When we collect strings with strings,
print(name+surname)
"1" + "1" # "11"

test = "Hello World"
test.functions

print(test.capitalize()) >>> Hello world [Capitalizes the initial letter.]
print(test.title()) >>> Hello World [Capitalizes the first letter of all words.]
print(test.lower()) >>> hello world [Writes all letters in lowercase.]
print(test.upper()) >>> HELLO WORLD [Writes all letters in capitals.]
print(test.count("l")) >>> 3 [Uppercase and lowercase letters must be taken into account.]

ex.
print(test.endswith("A")) >>> False [It tests what the last letter ends with.]
print(test.endswith("d")) >>> True 

ex.
print(test.startswith("H")) >>> True [It tests what the last letter starts with.]

ex.
print(test.index("W")) >>> 6 [It allows finding the location of the letter.]

ex.
print(test.isspace()) >>> False [It checks if there are only spaces inside.]
if it were like this, test= " "
print(test.isspace()) >>> True 

ex.
Alphanumeric means that it is both a character and a number.
any= "abcde4567" [If there is _ it is not isalnum. - False]
print(any.isalnum()) >>> True
*
print(test.isalpha()) >>> False [It's not alphabetical because it has numbers]
*
print(test.isnumeric()) >>> False [There should only be numbers.] 
NOTE: If there are spaces, it outputs false.
*
print(test.isdecimal()) [Return True if the string is decimal string, False otherwise. A string is a decimal string if all characters in the string are decimal and there is at leaast one character in the string.]
* 
print(test.isdigit()) [Return True if the string is a digit string, False otherwise. A string is a digit string if all characters in the string are digits and there is at least one character in the string.]

ex. If you're wondering where the letter o is,
test= "Hello world"
print(test.find("o")) >>> 4 [The computer starts counting from 0.]

surname = "Doe\n\t"
print(surname.strip()) >>> Doe [Removed the whitespaces at the end and beginning.]

text = "a b c d"
print(text.split()) >>> [a, b, c, d]

***
String Formatters
1) fstring

name= "Suzy"
welcome_message= f"Hello World {name}"
print(welcome_message) >>> Hello World Suzy

welcome_message= f"Hello World {name!r}" 
print(welcome_message) >>> Hello World 'Suzy'

weight = 80.154556
message = f"Hello World Your Weight: {weight:.2f (or 1f)}" 
Note: Don't forget to put : when using.
Note: {weight/2 *2 etc.} You can perform mathematical operations in parentheses.

2)str.format

welcome_message="Hello World {name}".format(name="Suzy") 
Note: You must put the characters in quotes.
welcome_message="Hello World {number}".format(number=1) 
welcome_message="Hello World {name}, {one}, {two}".format(name="Suzy", one=1, two=2) 

3) %
# formatter specifiers #
%d integer // %.2f float // %f decimal number // %s texts // %c single character

text = "Name: %s, Surname: %s, Age: %d, Weight: %f (or %.2f)" %("John", "Doe", 19, 85.676896)
print(text)
Note: It also works if you type %s in all of them. However, if a string value is given where %d (not str) is placed, it gives an error.

***
Arithmetic Types

*İntegers (positive - negative integers and 0)
*Float - Floating Point Number (3.14 , e etc.)
*Complex - (1j+1 etc.)
*Boolean - True (1) or False (0)

print(True + True) >>> 2
print(False+ True) >>> 1

***
year= 2023 
year.__abs__() !absolute value

ex. 
text= -2023
print(abs(text)) >>> 2023

ex.
text= 2000
print(pow(2, text)) >>> 2^2000

ex.
import math
print(math.sqrt(2000)) >>> √2000 = 44.72
print(math.sin(60)) >>> -0.30
print(math.cosh(60)) >>> 5.71
print(math.factorial(5)) >>> 120

***

year= 2000
year + year # 4000
year / year #1
year *2 # 4000
year // 4 # 500

year += 1 > 2001
year -= 2 > 1998
year *= 2 > 4000
year /= 5 > 400
year %= 200 > 0
year //= 201 > 9.9 > 9

Note: / is a floating point division operator and // is an integer division operator.














